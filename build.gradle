apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'sonar'
apply plugin: 'cobertura'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
  compile group: 'org.codehaus.groovy', name:'groovy-all', version: '2.+'
  compile group: 'org.scala-lang', name: 'scala-library', version: '2.9.2'
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.scalatest', name: 'scalatest_2.9.2', version: '1.9.1'
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "net.saliman:gradle-cobertura-plugin:1.1.1"
  }
}

cobertura {
  coverageDirs = [sourceSets.main.java.srcDirs,
                  sourceSets.main.groovy.srcDirs,
                  sourceSets.main.scala.srcDirs]
}

/*sonar {
  server {
    url = "http://localhost:9000"
  }
  database {
    url = "jdbc:h2:tcp://localhost:9092/sonar"
    driverClassName = "org.h2.Driver"
    username = "sonar"
    password = "sonar"
  }
  project {
    dynamicAnalysis = "reuseReports"
    coberturaReportPath = file("$buildDir/reports/cobertura/cobertura.xml")
    testReportPath = file("$buildDir/test-results")
  }
}*/

task dummy {
  println sourceSets.main.java.srcDirs
  println sourceSets.main.groovy.srcDirs
  println sourceSets.main.scala.srcDirs
}
/*
test << {
  ant.taskdef(
    name: 'scalatest', 
    classname: 'org.scalatest.tools.ScalaTestAntTask', 
    classpath: classpath.asPath
  )
  ant.scalatest(
    runpath: testClassesDir, 
    haltonfailure: 'true', 
    fork: 'false') {
    reporter(type: 'stderr')
  }
}*/
